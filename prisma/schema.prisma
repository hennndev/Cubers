// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@map("account")
  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@map("session")
}



model User {
  id              String          @id
  name            String
  username        String          @unique
  email           String          @unique
  password        String?
  profileImage    String?         
  emailVerified   Boolean         @default(false)
  loginMethod     LoginMethod     @default(CREDENTIALS)
  userDetailId    Int?            @unique
  detail          UserDetail?     @relation(fields: [userDetailId], references: [id])
  groupsMember    GroupMember[]
  groups          Group[]
          
  friends         User[]          @relation("Friends")
  friendOf        User[]          @relation("Friends")
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime        @default(now())

  @@map("users")
  @@index([userDetailId])
}

enum LoginMethod {
  CREDENTIALS
  GOOGLE
}

model UserDetail {
  id                Int               @id @default(autoincrement())
  status            UserStatus        @default(STUDENT)
  country           String
  city              String
  fullAddress       String
  postalCode        Int
  user              User?

  detailStudentId   Int?              @unique
  detailStudent     DetailStudent?    @relation(fields: [detailStudentId], references: [id])

  detailWorkerId    Int?              @unique
  detailWorker      DetailWorker?     @relation(fields: [detailWorkerId], references: [id])
  createdAt         DateTime          @default(now())

  @@map("user_detail")
  @@index([detailStudentId])
  @@index([detailWorkerId])
}

enum UserStatus {
  STUDENT
  WORKER
}

model DetailStudent {
  id            Int     @id
  university    String
  prodi         String
  semester      Int
  userDetail    UserDetail?

  @@map("detail_student")
}

model DetailWorker {
  id          Int       @id
  job         String
  company     String
  userDetail  UserDetail?

  @@map("detail_worker")
}


model Group {
  id            Int           @id @default(autoincrement())
  groupOwnerId  String
  groupOwner    User          @relation(fields: [groupOwnerId], references: [id])
  name          String
  level         GroupLevel   
  description   String
  tags          String[]
  members       GroupMember[]
  createdAt     DateTime      @default(now())

  @@map("groups")
  @@index([groupOwnerId])
}

enum GroupLevel {
  COMMON
  MIDDLE
  PRIORITY
}

model GroupMember {
  id            Int        @id @default(autoincrement())
  roleGroup     RoleGroup  @default(MEMBER)
  role          String?
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  groupId       Int 
  group         Group      @relation(fields: [groupId], references: [id])
  tasks         Task[]
  createdAt     DateTime   @default(now())
  
  @@map("group_member")
  @@index([userId])
  @@index([groupId])
}

enum RoleGroup {
  OWNER
  ADMIN
  MEMBER
}

model Task {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  status      TaskStatus      @default(ToDo)
  assigneeId  Int
  assignee    GroupMember     @relation(fields: [assigneeId], references: [id])
  review      String
  createdAt   DateTime        @default(now())

  @@map("task")
}

enum TaskStatus {
  ToDo
  InProgress
  InReview
  Revision
  Done
}


// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id              Int           @id @default(autoincrement())
  name            String
  username        String        @unique
  email           String        @unique
  password        String
  userDetailId    Int           @unique
  detail          UserDetail    @relation(fields: [userDetailId], references: [id])
  memberGroup     MemberGroup[]
  groupOwner      Group[]
  createdAt       DateTime      @default(now())

  @@index([userDetailId])
}

model UserDetail {
  id                Int               @id @default(autoincrement())
  status            UserStatus        @default(STUDENT)
  country           String
  city              String
  fullAddress       String
  postalCode        Int
  user              User?

  detailStudentId   Int?              @unique
  detailStudent     DetailStudent?    @relation(fields: [detailStudentId], references: [id])

  detailWorkerId    Int?              @unique
  detailWorker      DetailWorker?     @relation(fields: [detailWorkerId], references: [id])
  createdAt         DateTime          @default(now())

  @@index([detailStudentId])
  @@index([detailWorkerId])
}

enum UserStatus {
  STUDENT
  WORKER
}

model DetailStudent {
  id            Int     @id
  university    String
  prodi         String
  semester      Int
  userDetail    UserDetail?
}

model DetailWorker {
  id          Int       @id
  job         String
  company     String
  userDetail  UserDetail?
}



model Group {
  id            Int           @id @default(autoincrement())
  groupOwnerId  Int
  groupOwner    User          @relation(fields: [groupOwnerId], references: [id])
  name          String
  description   String
  tags          String[]
  members       MemberGroup[]
  createdAt     DateTime      @default(now())

  @@index([groupOwnerId])
}

model MemberGroup {
  id            Int        @id @default(autoincrement())
  roleGroup     RoleGroup  @default(MEMBER)
  role          String
  userId        Int
  user          User       @relation(fields: [userId], references: [id])
  groupId       Int
  group         Group      @relation(fields: [groupId], references: [id])
  task          Task[]
  createdAt     DateTime   @default(now())

  @@index([userId])
  @@index([groupId])
}

enum RoleGroup {
  ADMIN
  MEMBER
}

model Task {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  status      TaskStatus
  assigneeId  Int
  assignee    MemberGroup     @relation(fields: [assigneeId], references: [id])
  review      String
  createdAt   DateTime        @default(now())
}

enum TaskStatus {
  ToDo
  InProgress
  InReview
  Revision
  Done
}


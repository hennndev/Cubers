// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@map("account")
  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@map("session")
}


// ==========USER==========
model User {
  id              String          @id
  name            String                 
  username        String          @unique
  email           String          @unique
  password        String?
  profileImage    String?                 
  emailVerified   Boolean         @default(false)
  loginMethod     LoginMethod     @default(CREDENTIALS)
  bio             String
  country         String
  city            String
  whatsappNumber  String
  address         String
  status          UserStatus

  //jika statusnya student atau student and worker
  detailStudentId   Int?              @unique
  detailStudent     DetailStudent?    @relation(fields: [detailStudentId], references: [id])

  //jika statusnya worker atau student and worker
  detailWorkerId    Int?              @unique
  detailWorker      DetailWorker?     @relation(fields: [detailWorkerId], references: [id])
  
  groups          Group[]
  groupsMember    GroupMember[]
          
  friends         User[]          @relation("Friends")
  friendOf        User[]          @relation("Friends")
  
  projects        Project[]
  projectsMember  ProjectMember[]

  accounts        Account[]
  sessions        Session[]
  
  createdAt       DateTime        @default(now())

  @@map("users")
  @@index([detailStudentId])
  @@index([detailWorkerId])
}
enum LoginMethod {
  CREDENTIALS
  GOOGLE
}
enum UserStatus {
  STUDENT
  WORKER
  STUDENT_AND_WORKER
}
model DetailStudent {
  id            Int     @id @default(autoincrement())
  institution   String
  major         String
  gradeLevel    String
  User User[]

  @@map("detail_student")
}
model DetailWorker {
  id          Int       @id @default(autoincrement())
  position    String
  company     String
  department  String
  experience  String
  User User[]

  @@map("detail_worker")
}




// ==========GROUP==========
model Group {
  id            Int           @id @default(autoincrement())
  groupOwnerId  String
  groupOwner    User          @relation(fields: [groupOwnerId], references: [id], onDelete: Cascade)
  name          String
  level         GroupLevel   
  description   String
  tags          String[]
  members       GroupMember[]
  createdAt     DateTime      @default(now())

  @@map("groups")
  @@index([groupOwnerId])
}
enum GroupLevel {
  Common
  Middle
  Priority
}
model GroupMember {
  id            Int        @id @default(autoincrement())
  roleGroup     RoleGroup  @default(Member)
  role          String?
  username      String     
  user          User       @relation(fields: [username], references: [username], onDelete: Cascade)
  groupId       Int 
  group         Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  
  @@map("group_member")
  @@index([username])
  @@index([groupId])
}
enum RoleGroup {
  Owner
  Admin
  Member
}




// ==========PROJECT==========
model Project {
  id              Int             @id @default(autoincrement())
  name            String
  priority        ProjectPriority
  description     String
  startDate       DateTime
  endDate         DateTime
  estimatedBudget String
  status          ProjectStatus
  tags            String[]

  roles           ProjectRole[]  
  projectOwnerId  String
  projectOwner    User            @relation(fields: [projectOwnerId], references: [id])
  tasks           Task[]
  memberRoles     ProjectRoleMember[]
  members         ProjectMember[] 
  createdAt       DateTime        @default(now())

  @@map("projects")
}
enum ProjectStatus {
  Pending
  Ongoing
  Onhold
  Completed
}
enum ProjectPriority {
  Common
  Middle
  Priority
}
//about roles in project
model ProjectRole {
  id            Int       @id @default(autoincrement())
  role          String    @unique
  projects      Project[]
  rolesProject  ProjectRoleMember[]
  createdAt     DateTime  @default(now())

  @@map("project_roles")
}
//about members of project
model ProjectMember {
  id                    Int             @id  @default(autoincrement())
  username              String          @unique
  user                  User            @relation(fields: [username], references: [username], onDelete: Cascade)
  projectId             Int             @unique
  project               Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt             DateTime        @default(now())
  roleProjectControl    RoleProjectControl    @default(Member)
  ProjectRoleMember     ProjectRoleMember[]
  
  @@map("project_members")
  @@index([username])
  @@index([projectId])
}
enum RoleProjectControl {
  Owner
  Admin
  Member
}   
// about roles of project member
model ProjectRoleMember {
  id              Int            @id @default(autoincrement())
  roleId          Int
  role            ProjectRole    @relation(fields: [roleId], references: [id])
  memberId        Int  
  user            ProjectMember  @relation(fields: [memberId], references: [id])
  projects        Project[]
  tasks           Task[]
  createdAt       DateTime       @default(now())

  @@map("project_roles_member")  
  @@index([memberId])
}
//about task 
model Task {
  id              Int               @id @default(autoincrement())
  task            String
  status          TaskStatus        @default(Pending)
  assigneeId      Int               @unique
  assignee        ProjectRoleMember @relation(fields: [assigneeId], references: [id])
  review          String
  createdAt       DateTime          @default(now())
  Project         Project[]

  @@map("tasks")
  @@index([assigneeId])
}
enum TaskStatus {
  Pending
  Ongoing
  InReview
  Revision
  Done
}
